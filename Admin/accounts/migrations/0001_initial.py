# Generated by Django 4.2.16 on 2025-08-12 20:12

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="CustomUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "username",
                    models.CharField(blank=True, max_length=20, null=True, unique=True),
                ),
                (
                    "employee_code",
                    models.CharField(
                        blank=True,
                        max_length=20,
                        null=True,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[A-Z0-9]{3,20}$",
                                "Employee code must be 3-20 characters, alphanumeric uppercase only",
                            )
                        ],
                    ),
                ),
                ("first_name", models.CharField(blank=True, max_length=50)),
                ("last_name", models.CharField(blank=True, max_length=50)),
                ("middle_name", models.CharField(blank=True, max_length=50, null=True)),
                (
                    "email",
                    models.EmailField(
                        blank=True,
                        max_length=254,
                        null=True,
                        unique=True,
                        validators=[django.core.validators.EmailValidator()],
                    ),
                ),
                (
                    "phone_number",
                    models.CharField(
                        blank=True,
                        max_length=15,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^\\+?[1-9]\\d{1,14}$", "Enter a valid phone number"
                            )
                        ],
                    ),
                ),
                ("date_of_birth", models.DateField(blank=True, null=True)),
                (
                    "gender",
                    models.CharField(
                        blank=True,
                        choices=[("M", "Male"), ("F", "Female"), ("O", "Other")],
                        max_length=1,
                        null=True,
                    ),
                ),
                (
                    "address_line1",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "address_line2",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("city", models.CharField(blank=True, max_length=100, null=True)),
                ("state", models.CharField(blank=True, max_length=100, null=True)),
                ("postal_code", models.CharField(blank=True, max_length=20, null=True)),
                ("country", models.CharField(default="Sri Lanka", max_length=100)),
                (
                    "emergency_contact_name",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                (
                    "emergency_contact_phone",
                    models.CharField(blank=True, max_length=15, null=True),
                ),
                (
                    "emergency_contact_relationship",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
                ("job_title", models.CharField(blank=True, max_length=100, null=True)),
                ("hire_date", models.DateField(blank=True, null=True)),
                ("termination_date", models.DateField(blank=True, null=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("ACTIVE", "Active"),
                            ("INACTIVE", "Inactive"),
                            ("SUSPENDED", "Suspended"),
                            ("TERMINATED", "Terminated"),
                        ],
                        default="ACTIVE",
                        max_length=20,
                    ),
                ),
                ("is_verified", models.BooleanField(default=False)),
                ("last_login_ip", models.GenericIPAddressField(blank=True, null=True)),
                ("failed_login_attempts", models.PositiveIntegerField(default=0)),
                ("account_locked_until", models.DateTimeField(blank=True, null=True)),
                ("password_changed_at", models.DateTimeField(blank=True, null=True)),
                ("must_change_password", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_users",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "users",
                "ordering": ["employee_code"],
            },
        ),
        migrations.CreateModel(
            name="Role",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "name",
                    models.CharField(
                        choices=[
                            ("SUPER_ADMIN", "Super Admin"),
                            ("MANAGER", "Manager"),
                            ("CASHIER", "Cashier"),
                            ("SALESMAN", "Salesman"),
                            ("OTHER_STAFF", "Other Staff"),
                            ("CLEANER", "Cleaner"),
                            ("DRIVER", "Driver"),
                            ("ASSISTANT", "Assistant"),
                            ("STOREKEEPER", "Storekeeper"),
                            ("OFFICE_WORKER", "Office Worker"),
                        ],
                        max_length=50,
                        unique=True,
                    ),
                ),
                ("display_name", models.CharField(max_length=100)),
                ("description", models.TextField(blank=True, null=True)),
                ("level", models.PositiveIntegerField(default=1)),
                ("can_manage_employees", models.BooleanField(default=False)),
                ("can_view_all_data", models.BooleanField(default=False)),
                ("can_approve_leave", models.BooleanField(default=False)),
                ("can_manage_payroll", models.BooleanField(default=False)),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_roles",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "permissions",
                    models.ManyToManyField(
                        blank=True, related_name="custom_roles", to="auth.permission"
                    ),
                ),
            ],
            options={
                "db_table": "roles",
                "ordering": ["display_name"],
            },
        ),
        migrations.CreateModel(
            name="Department",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("name", models.CharField(max_length=100, unique=True)),
                ("code", models.CharField(max_length=20, unique=True)),
                ("description", models.TextField(blank=True, null=True)),
                (
                    "budget",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=15, null=True
                    ),
                ),
                ("location", models.CharField(blank=True, max_length=255, null=True)),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_departments",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "manager",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="managed_departments",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "parent_department",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sub_departments",
                        to="accounts.department",
                    ),
                ),
            ],
            options={
                "db_table": "departments",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="AuditLog",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "action",
                    models.CharField(
                        choices=[
                            ("CREATE", "Create"),
                            ("UPDATE", "Update"),
                            ("DELETE", "Delete"),
                            ("LOGIN", "Login"),
                            ("LOGOUT", "Logout"),
                            ("PASSWORD_CHANGE", "Password Change"),
                            ("PERMISSION_CHANGE", "Permission Change"),
                            ("ATTENDANCE_CHANGE", "Attendance Change"),
                            ("LEAVE_CHANGE", "Leave Change"),
                            ("PAYROLL_CHANGE", "Payroll Change"),
                            ("SYSTEM_CHANGE", "System Change"),
                        ],
                        max_length=50,
                    ),
                ),
                ("model_name", models.CharField(blank=True, max_length=100, null=True)),
                ("object_id", models.CharField(blank=True, max_length=100, null=True)),
                (
                    "object_repr",
                    models.CharField(blank=True, max_length=200, null=True),
                ),
                ("changes", models.JSONField(blank=True, default=dict)),
                ("ip_address", models.GenericIPAddressField(blank=True, null=True)),
                ("user_agent", models.TextField(blank=True, null=True)),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                ("session_key", models.CharField(blank=True, max_length=40, null=True)),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="audit_logs",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "audit_logs",
                "ordering": ["-timestamp"],
            },
        ),
        migrations.CreateModel(
            name="APIKey",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("key_hash", models.CharField(max_length=64, unique=True)),
                ("permissions", models.JSONField(blank=True, default=list)),
                ("is_active", models.BooleanField(default=True)),
                ("expires_at", models.DateTimeField(blank=True, null=True)),
                ("last_used_at", models.DateTimeField(blank=True, null=True)),
                ("usage_count", models.PositiveIntegerField(default=0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="api_keys",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "api_keys",
                "ordering": ["-created_at"],
            },
        ),
        migrations.AddField(
            model_name="customuser",
            name="department",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="employees",
                to="accounts.department",
            ),
        ),
        migrations.AddField(
            model_name="customuser",
            name="groups",
            field=models.ManyToManyField(
                blank=True,
                help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                related_name="user_set",
                related_query_name="user",
                to="auth.group",
                verbose_name="groups",
            ),
        ),
        migrations.AddField(
            model_name="customuser",
            name="manager",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="subordinates",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="customuser",
            name="role",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="users",
                to="accounts.role",
            ),
        ),
        migrations.AddField(
            model_name="customuser",
            name="user_permissions",
            field=models.ManyToManyField(
                blank=True,
                help_text="Specific permissions for this user.",
                related_name="user_set",
                related_query_name="user",
                to="auth.permission",
                verbose_name="user permissions",
            ),
        ),
        migrations.CreateModel(
            name="UserSession",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("session_key_hash", models.CharField(max_length=64, unique=True)),
                ("ip_address", models.GenericIPAddressField()),
                ("user_agent", models.TextField()),
                ("login_time", models.DateTimeField(auto_now_add=True)),
                ("last_activity", models.DateTimeField(auto_now=True)),
                ("logout_time", models.DateTimeField(blank=True, null=True)),
                ("is_active", models.BooleanField(default=True)),
                ("device_type", models.CharField(blank=True, max_length=50, null=True)),
                ("location", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sessions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "user_sessions",
                "ordering": ["-login_time"],
                "indexes": [
                    models.Index(
                        fields=["user", "is_active"],
                        name="user_sessio_user_id_bb1b83_idx",
                    ),
                    models.Index(
                        fields=["session_key_hash"],
                        name="user_sessio_session_7d97fc_idx",
                    ),
                    models.Index(
                        fields=["login_time"], name="user_sessio_login_t_571fa8_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="SystemConfiguration",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("key", models.CharField(max_length=100, unique=True)),
                ("value", models.TextField()),
                (
                    "setting_type",
                    models.CharField(
                        choices=[
                            ("SYSTEM", "System Setting"),
                            ("SECURITY", "Security Setting"),
                            ("NOTIFICATION", "Notification Setting"),
                            ("ATTENDANCE", "Attendance Setting"),
                            ("PAYROLL", "Payroll Setting"),
                            ("LEAVE", "Leave Setting"),
                            ("DEVICE", "Device Setting"),
                            ("CALCULATION", "Calculation Setting"),
                            ("VALIDATION", "Validation Setting"),
                            ("INTEGRATION", "Integration Setting"),
                        ],
                        default="SYSTEM",
                        max_length=20,
                    ),
                ),
                ("description", models.TextField(blank=True, null=True)),
                ("is_active", models.BooleanField(default=True)),
                ("is_encrypted", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="updated_configurations",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "system_configurations",
                "ordering": ["key"],
                "indexes": [
                    models.Index(fields=["key"], name="system_conf_key_35f9ec_idx"),
                    models.Index(
                        fields=["setting_type"], name="system_conf_setting_053688_idx"
                    ),
                    models.Index(
                        fields=["is_active"], name="system_conf_is_acti_efa679_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="PasswordResetToken",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("token", models.CharField(max_length=64, unique=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("expires_at", models.DateTimeField()),
                ("used_at", models.DateTimeField(blank=True, null=True)),
                ("is_used", models.BooleanField(default=False)),
                ("ip_address", models.GenericIPAddressField()),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="password_reset_tokens",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "password_reset_tokens",
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(fields=["token"], name="password_re_token_060a1f_idx"),
                    models.Index(
                        fields=["user", "is_used"],
                        name="password_re_user_id_cd37a3_idx",
                    ),
                    models.Index(
                        fields=["expires_at"], name="password_re_expires_8e96b7_idx"
                    ),
                ],
            },
        ),
        migrations.AddIndex(
            model_name="department",
            index=models.Index(fields=["name"], name="departments_name_c59a45_idx"),
        ),
        migrations.AddIndex(
            model_name="department",
            index=models.Index(fields=["code"], name="departments_code_9f933a_idx"),
        ),
        migrations.AddIndex(
            model_name="department",
            index=models.Index(
                fields=["is_active"], name="departments_is_acti_a777bd_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="auditlog",
            index=models.Index(
                fields=["user", "timestamp"], name="audit_logs_user_id_88267f_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="auditlog",
            index=models.Index(
                fields=["action", "timestamp"], name="audit_logs_action_474804_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="auditlog",
            index=models.Index(
                fields=["model_name", "object_id"], name="audit_logs_model_n_656046_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="auditlog",
            index=models.Index(
                fields=["timestamp"], name="audit_logs_timesta_423be6_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="apikey",
            index=models.Index(fields=["key_hash"], name="api_keys_key_has_8f2f29_idx"),
        ),
        migrations.AddIndex(
            model_name="apikey",
            index=models.Index(
                fields=["user", "is_active"], name="api_keys_user_id_6e7352_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="apikey",
            index=models.Index(
                fields=["expires_at"], name="api_keys_expires_f68b1a_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="customuser",
            index=models.Index(
                fields=["employee_code"], name="users_employe_ac6b2f_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="customuser",
            index=models.Index(fields=["email"], name="users_email_4b85f2_idx"),
        ),
        migrations.AddIndex(
            model_name="customuser",
            index=models.Index(fields=["status"], name="users_status_9ca66f_idx"),
        ),
        migrations.AddIndex(
            model_name="customuser",
            index=models.Index(fields=["department"], name="users_departm_5a2d9a_idx"),
        ),
        migrations.AddIndex(
            model_name="customuser",
            index=models.Index(fields=["is_active"], name="users_is_acti_847b48_idx"),
        ),
        migrations.AddIndex(
            model_name="customuser",
            index=models.Index(fields=["hire_date"], name="users_hire_da_9fba7a_idx"),
        ),
    ]
